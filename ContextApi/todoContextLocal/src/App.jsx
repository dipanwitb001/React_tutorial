import { useState , useEffect} from 'react'

import './App.css'
import { TodoProvider } from './contexts'
import TodoForm from './components/TodoFrom'
import { TodoItem } from './components'

function App() {

  // we will be storing the todos here , where the initial value is an empty array
  // á¸¥ere thse two state elements represent array
  const [todos, setTodos] = useState([])

  const addTodo = (todo) => {

    // here setTodos method is defined as a way such that whenever a new todo is added, the previous todo wont be deleted(if we have just written as setTodos(todoTitle), then the it would have updated the todolist only with the recent value.)


    // here ... represents destructuring of the previous todos and as we want to add the new todos before the previous todos, hence {id: Date.now(), ...todoTitle} is mentioned before the previous todos.

    // we could have given any id to the todos(id is imp in accessing the todos), if it was a dbms then the ids would have been autogenerated but here it not. so we are assinging the todo id acc to the time when it is created using Date.now(), hence every todo id will be unique
    setTodos((prev) => [{id: Date.now(), ...todo},...prev])
  }

  const updatedTodo = (id,todo) => {

    // as setTodos is a callback function, there we are using map function to navigate(loop), where prevTodo is each individual todo and as each todi is an object with properties(id, todoTitle, completion) so to access id we are using prevTodo.id which is checked with id (that is the id of the todo which is to be to updated)

    // if matches then update or remain as it is
    setTodos((prev) => prev.map((prevTodo) => (prevTodo.id === id ? todo : prevTodo)))
  }


  // filter function Returns the elements of an array that meet the condition specified in a callback function, here if the todo id is not the one passed in the callback function will be filtered in
  const deleteTodo = (id) => {
    setTodos((prev) => prev.filter((todo) => todo.id !== id))
  }

  const toggleComplete = (id) => {

    // after getting the id, all the properties of that todo is fethced ,then the completed property is overwridden
    setTodos((prev) => prev.map((prevTodo) => (prevTodo.id === id? {...prevTodo,completed : !prevTodo.completed} : prevTodo) ))
  }

  useEffect(() => {
    const todos = JSON.parse(localStorage.getItem("todos"))

    if(todos && todos.length > 0) {
        setTodos(todos)
    }
  }, [])
  
  useEffect(() => {
    localStorage.setItem("todos", JSON.stringify(todos))
  }, [todos])


  return (
    <TodoProvider value={{todos,addTodo,updatedTodo,deleteTodo,toggleComplete}}>
      <div className="bg-[#172842] min-h-screen py-8">
                <div className="w-full max-w-2xl mx-auto shadow-md rounded-lg px-4 py-3 text-white">
                    <h1 className="text-2xl font-bold text-center mb-8 mt-2">Manage Your Todos</h1>
                    <div className="mb-4">
                        <TodoForm/> 
                    </div>
                    <div className="flex flex-wrap gap-y-3">
                        {
                          todos.map((todo) => (
                            <div key={todo.id}
                            className='w-full'>

                              <TodoItem todo={todo}/>
                            </div>
                          ))
                        }
                    </div>
                </div>
            </div>
    </TodoProvider>
  )
}

export default App
